{"/home/travis/build/npmtest/node-npmtest-package-script/test.js":"/* istanbul instrument in package npmtest_package_script */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-package-script/lib.npmtest_package_script.js":"/* istanbul instrument in package npmtest_package_script */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_package_script = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_package_script = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-package-script/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-package-script && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_package_script */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_package_script\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_package_script.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_package_script.rollup.js'] =\n            local.assetsDict['/assets.npmtest_package_script.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_package_script.__dirname + '/lib.npmtest_package_script.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-package-script/node_modules/package-script/pkgscript.js":"/*\n *  Package Script Module\n *\n */\n\n\"use strict\";\n\nvar logger = require(\"./utils/Logger.js\"),\n    globalutils = require(\"./utils/Global.js\"),\n    utils = require(\"./utils/Utils.js\"),\n    _ = require('underscore'),\n    isLinux = utils.isLinux(),\n    spawn,\n    sudoopt = {\n        cachePassword: true,\n        prompt: 'Additional global npm(s) about to be installed, set your root password: ',\n        spawnOptions: { /* other options for spawn */ }\n    },\n    cprocess,\n    commands = [],\n    next= 0, size,\n    cparg = require('child_process'),\n    sudoarg = require('sudo'),\n    jsutils = require(\"js.utils\");\n\n\n\n/**\n * The default system value for the admin user is true\n *\n * @returns {boolean} The default admin value\n */\nfunction getDefaultAdmin() {\n    return true;\n}\n\nfunction getDefaultInit() {\n    return {\n        log: true\n    };\n}\n\n/**\n * Set the current spawn object.\n * Can be sudo for getting the admin prompt or child_process\n *\n * @param admin\n */\nfunction setSpawnObject(admin) {\n    admin = ((admin === undefined) ? getDefaultAdmin() : admin);\n    if (isLinux && admin) {\n        spawn = sudoarg;\n    } else {\n        spawn =  cparg.spawn;\n    }\n    return admin;\n}\n\n\n/**\n * Initialization functionality\n */\nfunction init() {\n    var log = \"Package Script installer Initialized ....\";\n    logger.logall(log);\n\n    setSpawnObject();\n}\n\n/**\n * Run a single spawn operation according to the given configuration\n *\n * @param items The passed configuration items\n * @param callback The functionality to be called on complete\n */\nfunction install(items, callback) {\n\n    var item = items[next],\n        command = item.command,\n        args = item.args,\n        admin = item.admin,\n        spawnopt = (item.spawnopt || {}),\n        print;\n\n\n    // set the spawn object according to the passed admin argument\n    admin = setSpawnObject(admin);\n\n    // run the command\n    if (isLinux) {\n        if (admin) {\n            // use sudo\n            args.unshift(command);\n            print = args.join(\" \");\n            logger.console.log(\"[package-script] Running Installer command: \" + print);\n\n            sudoopt.spawnOptions = {};\n            jsutils.Object.copy(spawnopt, sudoopt.spawnOptions);\n            cprocess = spawn(args, sudoopt);\n        } else {\n            //use child_process\n            print = args.join(\" \");\n            logger.console.log(\"[package-script] Running Installer command: \" + command + \" \" + print);\n            cprocess = spawn(command, args, spawnopt);\n        }\n    } else {\n        args.unshift(command);\n        args.unshift(\"/c\");\n        command = \"cmd\";\n        print = [command, args.join(\" \")].join(\" \");\n        logger.console.log(\"[package-script] Running Installer command: \" + print);\n        cprocess = spawn(command, args, spawnopt);\n\n    }\n\n    // -- Spawn Listeners\n    cprocess.stdout.on('data', function (data) {\n        var log = 'CAT Installer: ' + data;\n        logger.logall(log);\n    });\n\n    cprocess.stderr.on('data', function (data) {\n        if (data && (new String(data)).indexOf(\"npm ERR\") != -1) {\n            logger.logall('Package Script : ' + data);\n        } else {\n            logger.log2file('Package Script : ' + data);\n        }\n    });\n\n    cprocess.on('close', function (code) {\n        logger.log2file('Package Script Complete ' + code);\n        next++;\n        if (next < size) {\n            install(items, callback);\n\n        } else {\n            // callback\n            if (callback && _.isFunction(callback)) {\n                callback.call(this, code);\n\n            }\n        }\n    });\n}\n\nfunction initialize(config) {\n\n    var defaults = getDefaultInit(),\n        key;\n\n    if (config) {\n\n        for (key in defaults) {\n            globalutils.set(key, ( (key in config) ? config[key] :  defaults[key] ));\n            if (jsutils) {\n                jsutils.init(config);\n            }\n        }\n    }\n}\n\n// Initialization\n(function() {\n    init();\n    initialize({});\n})();\n\n\nfunction _packageProcess(config, callback) {\n    var configval = [],\n        names = [],\n        baseobj = {\n            command: \"npm\",\n            args: [config.action]\n        },\n        isinstalled = config.isinstalled,\n        spawnconfig = config.config,\n        isglobal = config.global,\n        isDebug = ('debug' in config ? (config.debug || 0) : 0),\n        depth = ('depth' in config ? (config.depth || \"10\") : \"10\"),\n        entry;\n\n    if (spawnconfig && _.isArray(spawnconfig)) {\n\n        spawnconfig.forEach(function(item) {\n            if (item) {\n                entry = {args:[]};\n                jsutils.Object.copy(baseobj, entry);\n                if (isglobal) {\n                    entry.args.push(\"-g\");\n                }\n                if (item.args) {\n                    entry.args = entry.args.concat(item.args);\n                }\n                if (item.name) {\n                    entry.args.push(item.name);\n                    entry.name = item.name;\n                    names.push (item.name);\n                } else {\n                    logger.console.error(\"[package-script install] 'name' is require parameter\");\n                }\n\n                entry.admin = (('admin' in item) ? item.admin : undefined);\n                entry.spawnopt = (('spawnopt' in item) ? item.spawnopt : undefined);\n                configval.push(entry);\n            }\n        });\n\n\n    } else {\n        logger.logall(\"[package-script] No valid configuration for 'install' function, see the docs for more information \");\n    }\n\n    jsutils.NPM.installed({global: isglobal, list: names, depth:depth, debug:isDebug}, function() {\n\n        var data  = this.data,\n            newarr = [];\n        if (data) {\n            configval.forEach(function(item){\n                if (item) {\n                    if (item.name) {\n                        if (!isinstalled) {\n                            if (!data[item.name]) {\n                                newarr.push(item);\n                            }\n                        } else {\n                            if (data[item.name]) {\n                                newarr.push(item);\n                            }\n                        }\n                    }\n                }\n            });\n        }\n\n        if (callback) {\n            callback.call({data: newarr});\n        }\n    });\n}\n\n/**\n * Executing multiple calls synchronously according to a given configuration\n *\n * @type {module.exports}\n */\nmodule.exports = function() {\n\n    return {\n\n        /**\n         * Initialization Settings\n         *\n         * @param config The initialization configuration\n         * e.g. {\n         *      log: false\n         * }\n         */\n        init: function(config) {\n            return initialize(config)\n        },\n\n        /**\n         * spawn additional command according to the config\n         *\n         * @param config The configuration for the spawn\n         * e.g. [{\n         *          admin: true, [optional (for now, linux support only)],\n         *          spawnopt: {cwd: '.'} [optional] (see child_process spawn docs)\n         *          command: 'npm',\n         *          args: [\"--version\"]\n         *      }]\n         *\n         * @param init The initial configuration, can be set in separate method (see 'init')\n         * @param callback The callback functionality\n         */\n        spawn: function(config, init, callback) {\n\n            var me = this;\n\n            // first initialize\n            if (init) {\n                this.init(init);\n            }\n\n            logger.log2file(\"\\n\\n************ Package Script  ************************************* process id: \" + process.pid);\n\n            if (config && _.isArray(config)) {\n                commands = commands.concat(config);\n                size = commands.length;\n                if (size > 0) {\n                    install(commands, function() {\n                        logger.logall(\"[package-script] process completed, see pkgscript.log for more information\");\n                        if (callback) {\n                            callback.call(me);\n                        }\n                    });\n                }\n\n            } else {\n                logger.logall(\"[package-script] No valid configuration for 'install' function, see the docs for more information \");\n            }\n        },\n\n        // TODO unify to generic - the configuration passed to the install/uninstall\n\n        /**\n         * Install packages\n         *\n         * @param config {Array} The configuration for the install\n         *      name        {String}    The package name\n         *      admin       {Boolean}   Get admin prompt (default to true)\n         *      spawnopt    {Object}    {cwd: '.'} [optional] (see child_process spawn docs)\n         *\n         * e.g. [{\n         *          admin: false,\n         *          name: \"test\"\n         *      }]\n         *\n         * @param opt The optional configuration\n         *      init The initial settings\n         *          global  {Boolean} specify if the given packages are global or not\n         *          log     {Boolean} specify if to set the log to off or on optional values [true/false]\n         *\n         *      callback The callback functionality\n         */\n        install: function(config, opt) {\n\n            var me = this,\n                configvar = {},\n                callback,\n                init;\n\n            if (opt) {\n                init = (opt.init || undefined);\n                callback = (opt.callback || undefined);\n            } else {\n                opt = {};\n            }\n\n            configvar.action = \"install\";\n            configvar.isinstalled = false;\n            configvar.config = config,\n            configvar.global = ((init && 'global' in init) ? init.global : false);\n            configvar.debug = opt.debug;\n            configvar.depth = opt.depth;\n\n            if (init) {\n                this.init(init);\n            }\n\n            _packageProcess(configvar, function() {\n                if (this.data && _.isArray(this.data) && this.data.length > 0) {\n                    me.spawn(this.data, init, function(){\n                        if (callback) {\n                            callback.call(me);\n                        }\n                    });\n                } else {\n                    if (callback) {\n                        callback.call(me);\n                    }\n\n                }\n            });\n        },\n\n        /**\n         * UnInstall packages\n         *\n         * @param config {Array} The configuration for the uninstall\n         *      name        {String}    The package name\n         *      admin       {Boolean}   Get admin prompt (default to true)\n         *      spawnopt    {Object}    {cwd: '.'} [optional] (see child_process spawn docs)\n         *\n         * e.g. [{\n         *          admin: false,\n         *          name: \"test\"\n         *      }]\n         *\n         * @param opt The optional configuration\n         *      init The initial settings\n         *          global  {Boolean} specify if the given packages are global or not\n         *          log     {Boolean} specify if to set the log to off or on optional values [true/false]\n         *\n         *      callback The callback functionality\n         */\n        uninstall: function(config, opt) {\n\n            var me = this,\n                configvar = {},\n                callback,\n                init;\n\n            if (opt) {\n                init = (opt.init || undefined);\n                callback = (opt.callback || undefined);\n            } else {\n                opt = {};\n            }\n\n            configvar.action = \"rm\";\n            configvar.isinstalled = true;\n            configvar.config = config,\n            configvar.global = ((init && 'global' in init) ? init.global : false);\n            configvar.debug = opt.debug;\n            configvar.depth = opt.depth;\n\n            if (init) {\n                this.init(init);\n            }\n\n            _packageProcess(configvar, function() {\n                if (this.data) {\n                    me.spawn(this.data, init, function() {\n                        if (callback) {\n                            callback.call(me);\n                        }\n                    });\n                }\n            });\n        }\n    };\n\n}();","/home/travis/build/npmtest/node-npmtest-package-script/node_modules/package-script/utils/Logger.js":"var _utils = require(\"./Utils.js\"),\n    _global = require(\"./Global.js\"),\n    _fs = require(\"fs\");\n\nmodule.exports = function() {\n\n    var _stub = function(){};\n\n    function isLog() {\n        return _global.get(\"log\");\n    }\n\n    return {\n\n        console: (isLog() ? console : {log: _stub, error: _stub, warn: _stub} ),\n\n        /**\n         * Print the given data to a file\n         *\n         * @param data The data to be write\n         */\n        log2file: function (data) {\n\n            if (!isLog()) {\n                return undefined;\n            }\n\n            try {\n                _fs.appendFileSync(\"pkgscript.log\", (_utils.now() + \"  \" + data + \"\\n\"), \"utf8\");\n\n            } catch (e) {\n                console.error(_utils.now + \" [package-script] Package Script, ERROR:\", e);\n            }\n        },\n\n        /**\n         * Log a message to the console and to a file.\n         *\n         * @param msg\n         */\n        logall: function (msg) {\n\n            if (!isLog()) {\n                return undefined;\n            }\n\n            if (msg) {\n                console.log(_utils.now() + \" \" + msg);\n                this.log2file(msg);\n            }\n        }\n\n    };\n\n}();","/home/travis/build/npmtest/node-npmtest-package-script/node_modules/package-script/utils/Utils.js":"var os = require('os'),\n    date = require(\"date-format-lite\");\n\nmodule.exports = function () {\n\n    return {\n\n        now: function() {\n            return ((new Date()).format(\"YYYY-MM-DD hh:mm:ss.S\"));\n        },\n\n        /**\n         * Check if the current OS is Linux\n         *\n         * @returns {boolean} in case running OS is linux return true else false\n         */\n        isLinux: function () {\n            var platform = os.platform();\n            return (platform == \"linux\" || platform == \"darwin\");\n        }\n\n    };\n\n}();","/home/travis/build/npmtest/node-npmtest-package-script/node_modules/package-script/utils/Global.js":"/**\n * Global variable manager\n *\n * @type {module.exports}\n */\nmodule.exports = function() {\n\n    // Setting global environment\n    global.pkgscript = {};\n\n\n    return {\n\n\n        set: function(key, value) {\n            global.pkgscript[key] = value;\n        },\n\n        get: function(key) {\n            return global.pkgscript[key];\n\n        }\n\n    }\n\n}();"}